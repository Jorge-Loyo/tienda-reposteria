// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo para Categor√≠as
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
}

model User {
  id                   Int       @id @default(autoincrement())
  name                 String?
  email                String    @unique
  password             String
  role                 String    @default("ORDERS_USER")
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  instagram            String?
  phoneNumber          String?
  address              String?
  identityCard         String?
  avatarUrl            String?
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?
  permissions          UserPermission[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserPermission[]
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permissionId])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  priceUSD    Float
  stock       Int      @default(0)
  sku         String?  @unique
  imageUrl    String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  isOfferActive Boolean   @default(false)
  offerPriceUSD Float? // Precio especial de la oferta (opcional)
  offerEndsAt   DateTime? // Fecha y hora en que termina la oferta (opcional)

  orderItems OrderItem[]
  categoryId Int
  category   Category    @relation(fields: [categoryId], references: [id])
}

model Order {
  id                     Int         @id @default(autoincrement())
  total                  Float
  customerName           String
  customerEmail          String
  address                String?
  identityCard           String?
  phone                  String?
  instagram              String?
  paymentMethod          String?
  shippingZoneIdentifier String?
  shippingCost           Float       @default(0)
  status                 String      @default("PENDIENTE_DE_PAGO")
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  items                  OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model ShippingZone {
  id                    Int    @id @default(autoincrement())
  identifier            String @unique // e.g., BARCELONA, PUERTO_LA_CRUZ
  name                  String // e.g., Barcelona, Puerto la Cruz
  cost                  Float  @default(0)
  freeShippingThreshold Float?
}

model InstagramPost {
  id        Int      @id @default(autoincrement())
  url       String
  imageUrl  String
  caption   String
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        Int      @id @default(autoincrement())
  title     String?
  alt       String
  src       String
  active    Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
