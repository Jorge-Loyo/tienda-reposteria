// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para Categorías
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  imageUrl String? // URL de la imagen de la categoría
  products Product[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  permissions RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model User {
  id                   Int              @id @default(autoincrement())
  name                 String?
  email                String           @unique
  password             String
  role                 String           @default("ORDERS_USER")
  isActive             Boolean          @default(true)
  createdAt            DateTime         @default(now())
  instagram            String?
  phoneNumber          String?
  address              String?
  identityCard         String?
  avatarUrl            String?
  passwordResetToken   String?          @unique
  passwordResetExpires DateTime?
  permissions          UserPermission[]
  supportTickets       SupportTicket[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserPermission[]
  roles       RolePermission[]
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  priceUSD    Float
  stock       Int      @default(0)
  sku         String?  @unique
  imageUrl    String?
  published   Boolean  @default(true)
  salesCount  Int      @default(0) // Contador de ventas para trending
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  isOfferActive Boolean   @default(false)
  offerPriceUSD Float? // Precio especial de la oferta (opcional)
  offerEndsAt   DateTime? // Fecha y hora en que termina la oferta (opcional)

  orderItems OrderItem[]
  categoryId Int
  category   Category    @relation(fields: [categoryId], references: [id])
}

model Order {
  id                     Int         @id @default(autoincrement())
  total                  Float
  customerName           String
  customerEmail          String
  address                String?
  identityCard           String?
  phone                  String?
  instagram              String?
  paymentMethod          String?
  receiptNumber          String? // Número de comprobante de pago
  confirmedBy            String? // Usuario que confirmó el pago
  shippingZoneIdentifier String?
  shippingCost           Float       @default(0)
  status                 String      @default("PENDIENTE_DE_PAGO")
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  items                  OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model ShippingZone {
  id                    Int            @id @default(autoincrement())
  identifier            String         @unique // e.g., BARCELONA, PUERTO_LA_CRUZ
  name                  String // e.g., Barcelona, Puerto la Cruz
  cost                  Float          @default(0)
  freeShippingThreshold Float?
  isActive              Boolean        @default(true)
  postalCodes           String? // JSON array of postal codes
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt
  auditLogs             ZoneAuditLog[]
}

model ZoneAuditLog {
  id        Int          @id @default(autoincrement())
  zoneId    Int
  action    String // CREATE, UPDATE, DELETE, ACTIVATE, DEACTIVATE
  oldValues String? // JSON of old values
  newValues String? // JSON of new values
  userId    String? // Who made the change
  createdAt DateTime     @default(now())
  zone      ShippingZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)
}

model InstagramPost {
  id        Int      @id @default(autoincrement())
  url       String
  imageUrl  String
  caption   String
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        Int      @id @default(autoincrement())
  title     String?
  alt       String
  src       String
  active    Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  role      String?
  rating    Int // 1-5 stars
  comment   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GalleryImage {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  alt         String
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SiteConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupportTicket {
  id          Int      @id @default(autoincrement())
  ticketNumber String  @unique
  userId      Int
  type        String
  subject     String
  description String
  orderNumber String?
  priority    String   @default("media")
  status      String   @default("pendiente")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  responses   TicketResponse[]
}

model TicketResponse {
  id        Int           @id @default(autoincrement())
  ticketId  Int
  message   String
  isFromUser Boolean     @default(false)
  createdAt DateTime     @default(now())
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}
