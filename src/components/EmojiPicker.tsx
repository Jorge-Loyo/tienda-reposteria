'use client';

import { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Search, X } from 'lucide-react';

// Biblioteca amplia de emojis organizados por categor√≠as
const EMOJI_CATEGORIES = {
  'Comida y Bebida': [
    'üç∞', 'üßÅ', 'üç™', 'üç´', 'üç¨', 'üç≠', 'üçØ', 'ü•õ', '‚òï', 'üçµ', 
    'ü•§', 'üßÉ', 'üçì', 'üçí', 'üçë', 'ü•ù', 'üçå', 'üçç', 'ü•≠', 'üçé',
    'üçè', 'üçä', 'üçã', 'ü••', 'ü•ú', 'üå∞', 'üçû', 'ü•ñ', 'ü•®', 'ü•Ø',
    'üßÄ', 'ü•ö', 'üç≥', 'ü•ì', 'ü•û', 'üßà', 'üçØ', 'ü•£', 'üç≤', 'ü•ò'
  ],
  'Herramientas y Utensilios': [
    'ü•Ñ', 'üç¥', 'üî™', 'ü•¢', 'üçΩÔ∏è', 'ü•£', 'ü•õ', '‚òï', 'üçµ', 'üßä',
    '‚öñÔ∏è', 'üî•', '‚ùÑÔ∏è', '‚è∞', '‚è≤Ô∏è', 'üìè', 'üìê', '‚úÇÔ∏è', 'üîß', 'üî®',
    '‚öôÔ∏è', 'üõ†Ô∏è', 'üß∞', 'üî©', '‚õèÔ∏è', 'ü™ì', 'üóúÔ∏è', 'üîó', '‚õìÔ∏è', 'üìé'
  ],
  'Decoraci√≥n y Arte': [
    '‚ú®', 'üåü', '‚≠ê', 'üí´', 'üé®', 'üñåÔ∏è', 'üñçÔ∏è', '‚úèÔ∏è', 'üìù', 'üé≠',
    'üé™', 'üé®', 'üñºÔ∏è', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üéñÔ∏è', 'üéóÔ∏è',
    'üéÄ', 'üéÅ', 'üéä', 'üéâ', 'üéà', 'üéÇ', 'üïØÔ∏è', 'üîÆ', 'üíé', 'üíç'
  ],
  'Naturaleza': [
    'üå∏', 'üå∫', 'üåª', 'üå∑', 'üåπ', 'ü•Ä', 'üåæ', 'üåø', '‚òòÔ∏è', 'üçÄ',
    'üçÉ', 'üå±', 'üå≤', 'üå≥', 'üå¥', 'üåµ', 'üå∂Ô∏è', 'ü•ï', 'üåΩ', 'ü•í',
    'ü•¨', 'ü•¶', 'üßÑ', 'üßÖ', 'üçÑ', 'ü•î', 'üçÖ', 'ü´ê', 'üçá', 'ü•à'
  ],
  'S√≠mbolos': [
    'üíØ', 'üí¢', 'üí•', 'üí´', 'üí¶', 'üí®', 'üï≥Ô∏è', 'üí£', 'üí¨', 'üëÅÔ∏è‚Äçüó®Ô∏è',
    'üó®Ô∏è', 'üóØÔ∏è', 'üí≠', 'üí§', 'üì¢', 'üì£', 'üìØ', 'üîî', 'üîï', 'üéµ',
    'üé∂', 'üéº', 'üéπ', 'ü•Å', 'üé∑', 'üé∫', 'üé∏', 'ü™ï', 'üéª', 'üé§'
  ]
};

interface EmojiPickerProps {
  selectedEmoji?: string;
  onEmojiSelect: (emoji: string) => void;
  onClose: () => void;
}

export function EmojiPicker({ selectedEmoji, onEmojiSelect, onClose }: EmojiPickerProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [activeCategory, setActiveCategory] = useState('Comida y Bebida');

  // Filtrar emojis por b√∫squeda
  const getFilteredEmojis = () => {
    if (!searchTerm) {
      return EMOJI_CATEGORIES[activeCategory as keyof typeof EMOJI_CATEGORIES] || [];
    }

    // Buscar en todas las categor√≠as
    const allEmojis = Object.values(EMOJI_CATEGORIES).flat();
    return allEmojis.filter(emoji => {
      // Aqu√≠ podr√≠as agregar l√≥gica m√°s sofisticada de b√∫squeda
      // Por ahora, solo mostramos todos si hay t√©rmino de b√∫squeda
      return true;
    });
  };

  const filteredEmojis = getFilteredEmojis();

  return (
    <Card className="w-full max-w-2xl mx-auto overflow-hidden shadow-lg">
      <CardContent className="p-6">
        {/* Header con b√∫squeda */}
        <div className="flex items-center gap-2 mb-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Buscar emoji..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-8"
            />
            {searchTerm && (
              <button
                onClick={() => setSearchTerm('')}
                className="absolute right-2 top-1/2 transform -translate-y-1/2"
              >
                <X className="h-4 w-4 text-gray-400" />
              </button>
            )}
          </div>
          <Button variant="ghost" size="sm" onClick={onClose}>
            <X className="h-4 w-4" />
          </Button>
        </div>

        {/* Categor√≠as */}
        {!searchTerm && (
          <div className="flex gap-1 mb-4 overflow-x-auto">
            {Object.keys(EMOJI_CATEGORIES).map((category) => (
              <Button
                key={category}
                variant={activeCategory === category ? "default" : "outline"}
                size="sm"
                onClick={() => setActiveCategory(category)}
                className="whitespace-nowrap text-xs"
              >
                {category}
              </Button>
            ))}
          </div>
        )}

        {/* Grid de emojis */}
        <div className="grid grid-cols-8 gap-2 max-h-48 overflow-y-auto">
          {filteredEmojis.map((emoji, index) => (
            <button
              key={`${emoji}-${index}`}
              onClick={() => {
                onEmojiSelect(emoji);
              }}
              className={`
                w-12 h-12 flex items-center justify-center text-xl rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors cursor-pointer
                ${selectedEmoji === emoji ? 'bg-blue-100 dark:bg-blue-900 ring-2 ring-blue-500' : ''}
              `}
            >
              {emoji}
            </button>
          ))}
        </div>

        {filteredEmojis.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            No se encontraron emojis
          </div>
        )}
      </CardContent>
    </Card>
  );
}